# server any host 443 ssl;
server {
        listen *:443 ssl http2;
        listen [::]:443 ssl http2; #http2 not supported by WAF lua lib

#ssl on;

#ssl_session_timeout  5m;
#ssl_protocols  SSLv2 SSLv3 TLSv1;
#ssl_ciphers  ALL:!ADH:!EXPORT56:!EXPORT:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;
#ssl_prefer_server_ciphers   on;

    root html;

    index index.html index.php;
    include nginx-core.d/headers.conf;

ssl_session_timeout  5m;
#ssl_protocols  SSLv2 SSLv3 TLSv1;
#ssl_ciphers  ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;
#ssl_prefer_server_ciphers   on;

#ssl_session_cache shared:SSL:50m;
#ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

#disabled 8July2016 TLSv1.2;
#disabled 20160924 06:07:59 ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:ECDHE-RSA-AES128-GCM-SHA256:AES256+EECDH:DHE-RSA-AES128-GCM-SHA256:AES256+EDH:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";

#as per https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-14-04
#ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';


#ssl_prefer_server_ciphers on;
#ssl_dhparam /usr/local/nginx/dhparam.pem;

    ssl_certificate_by_lua_block {
      auto_ssl:ssl_certificate()
    }
    # ssl_certificate /usr/local/openresty/nginx/ssl/resty-auto-ssl-fallback.crt;
    # ssl_certificate_key /usr/local/openresty/nginx/ssl/resty-auto-ssl-fallback.key;
    ssl_certificate /etc/ssl/resty-auto-ssl-fallback.crt;
    ssl_certificate_key /etc/ssl/resty-auto-ssl-fallback.key;

	include nginx-ssl.d/vars.conf;
	include nginx-ssl.d/rate_limiting.conf;

location / { # Main location every request goes into this location block
        include nginx-ssl.d/proxy_debug.conf;
#resolver  8.8.8.8 valid=300s; #testing only google ns we should change this to our own dns server when we have dns
resolver  127.0.0.1 valid=60s;	

lua_need_request_body on;
#                 client_max_body_size 250k;
#                 client_body_buffer_size 50k;
client_max_body_size 13m;
client_body_timeout 10m;
send_timeout 10m;

rewrite_by_lua_file /usr/local/openresty/nginx/lua/main.lua;
proxy_buffering        on;
expires           $expires;
etag 'on';

     proxy_set_header host $host;
     proxy_set_header  X-Real-IP         $remote_addr;
     proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
     proxy_set_header  X-Forwarded-Proto $scheme;
    #  proxy_set_header X-Origin-Host "unix:/var/run/varnish/varnish.sock";
    #  proxy_set_header X-Origin-Port "";

    header_filter_by_lua_block {
        ngx.header["X-Origin-Host"] = "unix:/var/run/varnish/varnish.sock"
        ngx.header["X-Origin-Port"] = ""
    }

 #content_by_lua_block {
  #  -- ngx.say(ngx.var.proxy_host .. "I need no extra escaping here, for example: \r\nblah")
#--      ngx.exit(ngx.HTTP_OK)
 #}

      proxy_connect_timeout  60s;
      proxy_read_timeout    300s;

proxy_ssl_verify off;

#    proxy_ssl_protocols           TLSv1 TLSv1.1 TLSv1.2;
#    proxy_ssl_ciphers             HIGH:!aNULL:!MD5;
#    proxy_ssl_trusted_certificate /etc/nginx/ssl/ssl/chained.example.com.crt;

#    proxy_ssl_server_name         on;
#    proxy_ssl_verify              off;
    proxy_ssl_verify_depth        2;
    proxy_ssl_session_reuse       off;

# if ( $send_debug_headers ) {
# #add_header X-Proxy-Cache $upstream_cache_status;
# }
# proxy_set_header Connection "";
proxy_ignore_headers Cache-Control;
proxy_http_version 1.1;
proxy_redirect off;
#return 200 "Nginx https $proxy_host $proxy_port";
#proxy_pass http://backend;
proxy_pass http://unix:/var/run/nginx/nginx.sock;

}

} # server any host 443 ssl;