# Requests without the “Host” header field should not be allowed, a server that just drops the requests, can be defined:
# server { letsencrypted stopped working so commented this rule
#     listen      80;
#     server_name "";
#     return      444;
# }


  # Internal server running on port 8999 for handling certificate tasks.
  server {
    listen 127.0.0.1:8999;

    # Increase the body buffer size, to ensure the internal POSTs can always
    # parse the full POST contents into memory.
    client_body_buffer_size 128k;
    client_max_body_size 128k;

    location / {
      content_by_lua_block {
        auto_ssl:hook_server()
      }
    }
  }

server
{
   	listen 80 default_server;	#http2 proxy_protocol
	#prod config listen 80 default_server http2;	#proxy_protocol
    listen [::]:80 ipv6only=on default_server;
    server_name	_;
    root html;

    index index.html index.php;
    include nginx-core.d/headers.conf;

    #access_log      /tmp/access.log trace buffer=32k flush=5s; # Log $request_id
	#access_log on;
	access_log off;

	include nginx-ssl.d/autossl.conf;

	include nginx-core.d/gtg.conf;
	include nginx-core.d/php7.conf;

  #return 200 "Edgeone server is healthy ok!";

}

server {
    listen unix:/var/run/nginx/nginx.sock;
    server_name _;
resolver  8.8.8.8 valid=300s;	#we need it for now but discuss with Infra about DNS resolver as we cannot use Google DNS forever
#    resolver  127.0.0.1 valid=60s;	
	  ignore_invalid_headers on;
    default_type text/html;

    location /
    {

    more_set_headers "x-edgeone-route-stage: unix";  #this should be hidden from public after MVP
    # move to upstream  keepalive 100;

    #proxy_ssl_trusted_certificate /etc/nginx/trusted_ca_cert.crt;

    proxy_ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;

    set $upstream_endpoint $http_x_origin_host;
    set $upstream_port $http_x_origin_port;
    set $upstream_scheme $http_x_origin_scheme;

    if ( $upstream_endpoint = "" ) {
    return 200 "Edgeone host header validation failed. Please refer to the Technical Documentation!";
    }

    if ( $upstream_port != "" ) {
    set $upstream_endpoint $upstream_endpoint:$upstream_port;
    }

    if ( $upstream_scheme = "" ) {
    set $upstream_scheme "http://";
    }

    #  proxy_ssl_certificate
    #  proxy_ssl_certificate_key
    #   proxy_ssl_certificate     /etc/nginx/client.pem;
    #   proxy_ssl_certificate_key /etc/nginx/client.key;

    #   proxy_ssl_ciphers
    #   proxy_ssl_conf_command
    #   proxy_ssl_crl
    #   proxy_ssl_name
    #   proxy_ssl_password_file
    #   proxy_ssl_protocols
    #   proxy_ssl_server_name
    #   proxy_ssl_session_reuse default is on anyway
    #   proxy_ssl_trusted_certificate
    #    proxy_ssl_verify
        proxy_set_header HTTPS "on";
        proxy_ssl_verify_depth 2;
        proxy_set_header X-Forwarded-Proto https;

    proxy_read_timeout     120;
    proxy_connect_timeout  120;

        # Default is HTTP/1, keepalive is only enabled in HTTP/1.1
    proxy_http_version 1.1;

    # Remove the Connection header if the client sends it,
    # it could be "close" to close a keepalive connection
     proxy_set_header Connection "";

     proxy_pass_request_headers      on;
     proxy_set_header host $host;
     proxy_set_header X-Forwarded-Host $http_X-Origin-Host;
     proxy_set_header X-Real-IP $http_X-Real-IP;
     proxy_set_header X-Forwarded-For $http_proxy_add_x_forwarded_for;
    more_set_headers "x-edgeone-proxy-pass: $upstream_scheme$upstream_endpoint";  #this should be hidden from public after MVP
     proxy_pass $upstream_scheme$upstream_endpoint;

}
}