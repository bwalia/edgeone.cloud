location / {
    ModSecurityEnabled on;
    ModSecurityConfig modsec_includes.conf;
    #proxy_pass http://localhost:8011;
    #proxy_read_timeout 180s;
    root   html;
    index  index.html index.htm;
}


# access_by_lua_block {

# ngx.header["Server"] = "EDGEONE"

# local lua_resty_waf = require "resty.waf"

# local waf = lua_resty_waf:new()

# -- define options that will be inherited across all scopes
# waf:set_option("debugWAF", true)
# waf:set_option("mode", "INACTIVE")
# -- waf:set_option("mode", "ACTIVE")
# waf:set_option("debug", true)
# waf:set_option("debug_log_level", ngx.DEBUG)
# waf:set_option("event_log_target", "file")
# waf:set_option("event_log_target_path", "/tmp/waf.log")
# waf:set_option("event_log_target", "error")
# waf:set_option("event_log_request_headers", true)
# waf:set_option("event_log_request_arguments", true)
# waf:set_option("event_log_request_body", true)
# waf:set_option("event_log_periodic_flush", 1)

# waf:set_option("event_log_ngx_vars", "host")

# -- defines multiple allowed Content-Type values
# waf:set_option("allowed_content_types", { "text/html", "test/plain", "text/json", "application/json", "application/pdf", "application/binary", "application/x-www-form-urlencoded" })
# waf:set_option("allow_unknown_content_types", true)
#       -- increase the max response size to 20 MB
#       waf:set_option("res_body_max_size", 1024 * 1024 * 20)

# -- this may be desirable for low-traffic or testing sites
# -- by default, event logs are not written until the buffer is full
# -- for testing, flush the log buffer every 5 seconds
# --
# -- this is only necessary when configuring a remote TCP/UDP
# -- socket server for event logs. otherwise, this is ignored
# waf:set_option("event_log_periodic_flush", 5)

#       -- disable processing of multipart/form-data requests
#       -- note that the request body will still be sent to the upstream
#       waf:set_option("process_multipart_body", true)

# -- in order to use the loaded ruleset, it must be added via
# -- the 'add_ruleset' option
# -- waf:set_option("add_ruleset", "11000_whitelist")
# -- waf:set_option("add_ruleset", "20000_http_violation")
# -- waf:set_option("add_ruleset", "21000_http_anomaly")
# -- waf:set_option("add_ruleset", "35000_user_agent")
# -- waf:set_option("add_ruleset", "40000_generic_attack")
# -- waf:set_option("add_ruleset", "41000_sqli")
# -- waf:set_option("add_ruleset", "42000_xss")
# -- waf:set_option("add_ruleset", "90000_custom")
# -- waf:set_option("add_ruleset", "99000_scoring")

# -- run the firewall
# waf:exec()

# }


#             #header_filter_by_lua_block {
#                # local lua_resty_waf = require "resty.waf"

#                 #-- note that options set in previous handlers (in the same scope)
#                # -- do not need to be set again
#                 #local waf = lua_resty_waf:new()

#                 #waf:exec()
#             #}

#             #body_filter_by_lua_block {
#                # local lua_resty_waf = require "resty.waf"

#                 #local waf = lua_resty_waf:new()

#                 #waf:exec()
#             #}

#            # log_by_lua_block {
#                # local lua_resty_waf = require "resty.waf"

#                 #local waf = lua_resty_waf:new()

#                # waf:exec()
#             #}
