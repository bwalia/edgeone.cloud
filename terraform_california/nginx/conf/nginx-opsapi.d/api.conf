# server
# {
# 	listen 8443 ssl ipv6only=on;
# 	#prod config listen 443 ssl ipv6only=on http2;	#proxy_protocol
#     server_name	projectw.weshape.dev;

# 	ssl_certificate /etc/letsencrypt/live/projectw.weshape.dev/fullchain.pem; # Test TLS cert
# 	ssl_certificate_key /etc/letsencrypt/live/projectw.weshape.dev/privkey.pem; # Test TLS priv cert
# 	ssl_dhparam /etc/letsencrypt/live/projectw.weshape.dev/ssl-dhparams.pem; # Test DH params

# 	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;  # drop SSLv3 (POODLE vulnerability)
# 	ssl_session_cache shared:SSL:10m;
# 	ssl_session_timeout 10m;
# 	ssl_prefer_server_ciphers on;
# 	ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK';

#     include default.d/common.conf;

#     access_log  /tmp/sslparams.log sslparams buffer=32k flush=5s;
# 	access_log on;

# 	include default.d/enc_api.conf;

# }


server
{
   	listen 8333;
    listen [::]:8333;
    server_name	_;

    include nginx-core.d/headers.conf;
	more_set_headers "x-edge-app-name: edge_ops_api";

    #access_log      /tmp/access.log trace buffer=32k flush=5s; # Log $request_id
	access_log off;

        location / {

			limit_except GET PUT { # Restrict access from the known IPs only
			allow 127.0.0.1;
			allow 137.220.95.139; # Balinder apartment
			allow 62.235.158.205; # Balinder brussels apartment
			deny all;
			}

		proxy_pass http://localhost:3333;
 		}
}

server
{
   	listen 8888;
    listen [::]:8888;
    server_name	_;

    include nginx-core.d/headers.conf;
	more_set_headers "x-edge-app-name: edge_ops_api";

    #access_log      /tmp/access.log trace buffer=32k flush=5s; # Log $request_id
	access_log off;

	location / {
            root   html;
            index  index.html;
		  }

          location ~ \.htm$ {
            root   html;
		  }

          location ~ \.html$ {
            root   html;
            index  index.html;
            #lua_io_read_buffer_size 8192;
            content_by_lua_block {
              ngx.header.content_type = 'text/html;charset=UTF-8'
              local ngx = require 'ngx'
              local file = io.open(ngx.var.document_root ..'/index.html', 'r')
              html_text = file:read('*all')
                    if html_text ~= nil then
                        html_text = string.gsub(html_text, "{{hostName}}", ngx.var.hostName)
                    end
			  file:close()
              ngx.print(html_text)
            }
		}

        location /__api/system/nginx/service_control/ {
		rewrite ^/__api/system/nginx/service_control/ /v1/__api/system/nginx/service_control/ last;
		}

        location /__api/configurations/ {
		rewrite ^/__api/configurations/ /v1/__api/configurations/ last;
		}

        location /v1/__api/configurations/ {

			limit_except GET PUT { # Restrict access from the known IPs only
			allow 127.0.0.1;
			allow 137.220.95.139; # Balinder apartment
			deny all;
			}
				##--data '{"method": "config_update","config_name":["service_x.conf"],"directives":["server www.tenantservice.com;","tls_cert_uuid: uuid","tls_cert_key_uuid","tls: TLS v1.2","ciphers: BLAH BLAH"]}' \

				#curl --request PUT \
				#-H "Content-Type: application/json" \
				#-H "Authorization: Bearer ${TOKEN}" \
				#--data '{"action": "cfgUpdate","cfgName":"service_x.conf","cfgVersion":"v1.0","cfgType":"nginx|vcl","cfgData": "BASE64_Encoded_ConfigMap_Data" }' \
lua_need_request_body on;

content_by_lua_block {

		--local function run_command_output(cmd)
		--local file = assert(io.popen(cmd, "r"))
		--	--local file = assert(io.popen("sudo whoami", "r"))
		--local output = file:read("*all")
		--file:close()
		--return output
		--end

		ngx.header.content_type = 'text/json;charset=UTF-8'
		local req_headers_obj = ngx.req.get_headers()
		local auth = req_headers_obj["Authorization"]
                	--ngx.log(ngx.ERR, "userinfo authorization header: " .. (auth and auth or ""))
			encToken = "thisisunsafe"
			if encToken ~= nil and auth == "Bearer " .. encToken then
				local cjson = require "cjson"
				ngx.header.content_type = 'application/json'
				--ngx.flush()

				local enc_obj = {}
					--uncomment this item to debug auth related issues with enc token enc_obj["secret"] = encToken
					enc_obj["status"] = "Success"
					enc_obj["appName"] = "Edge OPS Config API"

						ngx.req.read_body()
						local request_body = ngx.req.get_body_data()
                        local request_uri_str = ngx.var.request_uri
                        local cfg_name = request_uri_str
                        cfg_name = cfg_name:match('[^/]+$')

						enc_obj["cfgName"] = cfg_name
						--enc_obj["cfgdata"] = request_body

						if not cfg_name ~= nil then
						-- ADD NEW TENANT NGINX CONFIG IN /tmp DIR
							-- Opens a config file in append write mode
							tenantConfigTmpPath = "/tmp/" .. cfg_name
							file = io.open(tenantConfigTmpPath, "w")
							-- sets the default output file as cfg_name in tmp dir
							io.output(file)

							-- appends a word test to the last line of the file
							io.write(request_body)

							-- closes the open file
							io.close(file)

				    	end
							-- ADD NEW TENANT NGINX CONFIG IN /tmp DIR

				ngx.say(cjson.encode(enc_obj))
                ngx.log(ngx.NOTICE, cjson.encode(enc_obj))

			else

			ngx.log(ngx.ERR, "Authorization failed.")
            ngx.status = 403
            ngx.say("Authorization failed.")
            ngx.exit(ngx.HTTP_FORBIDDEN)
			-- ngx.exit(ngx.HTTP_FORBIDDEN)

			end
            }

    }

	location /__internal_ops_api_svc_manager__ {
	rewrite_by_lua_block {
	ngx.req.set_uri(ngx.var.svc_name)
	}

     content_by_lua_block {
        --ngx.say("URI = ", ngx.var.uri)
        --ngx.say("service name = ", ngx.var.svc_name)
     }
	proxy_pass http://localhost:3333;
 	}

	location /v1/__api/system/nginx/service_control {
		set $svc_name '';
		content_by_lua_block {
			local request_uri_str = ngx.var.request_uri
			local svc_name_str = '/' .. request_uri_str:match('[^/]+$')

			res = ngx.location.capture("/__internal_ops_api_svc_manager__",
				{ vars = { svc_name = svc_name_str }})

			ngx.print(res.body)
		}
	}

	location /v1/__api/system/varnish/service_control {
		set $svc_name '';
		content_by_lua_block {
			local request_uri_str = ngx.var.request_uri
			local svc_name_str = '/' .. request_uri_str:match('[^/]+$')

			res = ngx.location.capture("/__internal_ops_api_svc_manager__",
				{ vars = { svc_name = svc_name_str }})

			ngx.print(res.body)
		}
	}

}
