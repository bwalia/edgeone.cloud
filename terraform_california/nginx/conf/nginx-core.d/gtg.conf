
        location / {
			limit_req zone=cdn burst=5;
            root   html;
            index  index.html;
		  }

          location ~ \.htm$ {
			limit_req zone=cdn burst=5;
            root   html;
		  }

          location ~ \.html$ {
			limit_req zone=cdn burst=5;
            root   html;
            index  index.html;
            #lua_io_read_buffer_size 8192;
            content_by_lua_block {
              ngx.header.content_type = 'text/html;charset=UTF-8'
              local ngx = require 'ngx'
              local file = io.open(ngx.var.document_root ..'/index.html', 'r')
              html_text = file:read('*all')
                    if html_text ~= nil then
                        html_text = string.gsub(html_text, "{{hostName}}", ngx.var.hostName)
                    end
              file:close()
             ngx.print(html_text)
            }
		}

        location /__gtg {
		rewrite ^/__gtg /v1/__gtg last;    
		}

        location /v1/__gtg {

			limit_except GET { # Restrict access from the known IPs only
			allow 127.0.0.1; 
			deny all; 
			}

        access_by_lua_block {
                ngx.header.content_type = 'text/html;charset=UTF-8'
				local req_headers_obj = ngx.req.get_headers()
                local auth = req_headers_obj["Authorization"]
                	--ngx.log(ngx.ERR, "userinfo authorization header: " .. (auth and auth or ""))
			--gtgToken = "thisisunsafe"
			if gtgToken ~= nil and auth == "Bearer " .. gtgToken then
				local cjson = require "cjson"
				ngx.header.content_type = 'application/json'
				local output = req_headers_obj["output"]
				--ngx.flush()

				local gtg_obj = {}
					--uncomment this item to debug auth related issues with gtg token gtg_obj["secret"] = gtgToken
					gtg_obj["state"] = "Healthy"
					gtg_obj["status"] = ngx.var.status
					gtg_obj["statusMsg"] = "Welcome to Nginx!"
					gtg_obj["appName"] = "nginx"
					gtg_obj["nginxVersion"] = ngx.config.nginx_version

			        if output == "all" then

						if hostName ~= nil  then
						gtg_obj["hostName"] = hostName

						end

					gtg_obj["body_bytes_sent"] = ngx.var.body_bytes_sent
					gtg_obj["uri"] = ngx.var.uri
					gtg_obj["documentRoot"] = ngx.var.document_root
					gtg_obj["remoteAddr"] = ngx.var.remote_addr
					gtg_obj["remoteUser"] = ngx.var.remote_user
					gtg_obj["remoteUser"] = ngx.var.remote_user
					gtg_obj["timeLocal"] = ngx.var.time_local
					gtg_obj["timeiso8601"] = ngx.var.time_iso8601
					gtg_obj["request"] = ngx.var.request
					gtg_obj["httpVia"] = ngx.var.http_via
					gtg_obj["httpReferer"] = ngx.var.http_referer
					gtg_obj["httpForwardedFor"] = ngx.var.http_x_forwarded_for
					gtg_obj["httpUserAgent"] = ngx.var.http_user_agent
					gtg_obj["httpUserDevice"] = ngx.var.x_ua_device
					gtg_obj["serverProtocol"] = ngx.var.server_protocol
					gtg_obj["host"] = ngx.var.host
					gtg_obj["httpHost"] = ngx.var.http_host
					gtg_obj["serverAddr"] = ngx.var.server_addr
					gtg_obj["serverName"] = ngx.var.server_name
					gtg_obj["msec"] = ngx.var.msec
					gtg_obj["msec_no_decimal"] = ngx.var.msec_no_decimal
					gtg_obj["requestTime"] = ngx.var.request_time
					gtg_obj["isSubrequest"] = ngx.is_subrequest
					gtg_obj["today"] = ngx.today()
					gtg_obj["now"] = ngx.now()
					gtg_obj["time"] = ngx.time()
					gtg_obj["upstreamConnectTime"] = ngx.var.upstream_connect_time
					gtg_obj["upstreamHeaderTime"] = ngx.var.upstream_header_time
					gtg_obj["upstreamResponseTime"] = ngx.var.upstream_response_time
					gtg_obj["httpTime"] = ngx.time()
					gtg_obj["luaVersion"] = ngx.config.ngx_lua_version
					gtg_obj["nginxPid"] = ngx.var.pid
					gtg_obj["workerProcId"] = ngx.worker.pid()
					gtg_obj["workerCount"] = ngx.worker.count()
					gtg_obj["connection"] = ngx.var.connection
					gtg_obj["connectionRequests"] = ngx.var.connection_requests
					gtg_obj["respHeadersSent"] = ngx.headers_sent
					gtg_obj["configPrefix"] = ngx.config.prefix()
					gtg_obj["nginxConfigure"] = ngx.config.nginx_configure()
					gtg_obj["uriArguments"] = ngx.req.get_uri_args()
					gtg_obj["args"] = ngx.var.args
					gtg_obj["queryString"] = ngx.var.query_string
					gtg_obj["tcpInfoRtt"] = ngx.var.tcpinfo_rtt
					gtg_obj["tcpInfoRttVar"] = ngx.var.tcpinfo_rttvar
					gtg_obj["tcpInfoSndCwnd"] = ngx.var.tcpinfo_snd_cwnd
					gtg_obj["tcpInfoRcvSpace"] = ngx.var.tcpinfo_rcv_space
					gtg_obj["scheme"] = ngx.var.scheme
					gtg_obj["pipe"] = ngx.var.pipe
					gtg_obj["requestHeaders"] = req_headers_obj
					gtg_obj["requestMethod"] = ngx.var.request_method
					gtg_obj["httpCookie"] = ngx.var.http_cookie
					gtg_obj["requestLength"] = ngx.var.request_length
					gtg_obj["requestFilename"] = ngx.var.request_filename
					gtg_obj["requestCompletion"] = ngx.var.request_completion
					gtg_obj["requestId"] = ngx.var.request_id

				    end

				ngx.say(cjson.encode(gtg_obj))
                ngx.log(ngx.NOTICE, cjson.encode(gtg_obj))

			else
			
			ngx.log(ngx.ERR, "Authorization failed.")
            ngx.status = 403
            ngx.say("Authorization failed.")
            ngx.exit(200)

				end
            }
        }